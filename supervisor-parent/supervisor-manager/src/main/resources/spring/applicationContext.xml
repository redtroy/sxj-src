<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
                        http://www.springframework.org/schema/task 
                        http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true">

	<import resource="classpath*:spring/database-config.xml" />
	<import resource="classpath*:spring/applicationContext-shiro.xml" />
	<import resource="classpath*:spring/fast-dfs.xml" />
	<!-- <import resource="classpath*:spring/rpc/jsonrpc-config.xml" /> -->
	<task:annotation-driven />
	<context:annotation-config />


	<bean id="configBean"
		class="com.sxj.spring.modules.beanfactory.CustomizedPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config/database.properties</value>
				<value>classpath*:config/mobile_message.properties</value>
				<value>classpath*:config/fdfs_client.properties</value>
				<value>classpath*:config/shiro.properties</value>
				<value>classpath*:config/ca.properties</value>
				<value>classpath*:cache.properties</value>
				<value>classpath*:config/httpclient.properties</value>
			</list>
		</property>
	</bean>
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.sxj.supervisor.service">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 事务管理器, Jdbc单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="false" />

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="com.sxj.mybatis.orm.ActiveSQLSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.sxj.supervisor.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:/mapper/**/*Mapper.xml" />

	</bean>
	<!-- 扫描basePackage下所有标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sxj.supervisor.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置多级缓存 -->
	<bean id="cacheManager" class="com.sxj.cache.manager.HierarchicalCacheManager"
		lazy-init="false" init-method="initCacheProvider">
		<!-- <property name="configFile" value="cache.properties"></property> -->
		<property name="databaseId" value="2"></property>
	</bean>

	<bean id="redisConcurrent" class="com.sxj.redis.core.concurrent.RedisConcurrent">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<bean id="redisCollections" class="com.sxj.redis.core.collections.RedisCollections">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<bean id="redisTopics" class="com.sxj.redis.core.pubsub.RedisTopics">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<bean class="com.sxj.util.comet.CometServiceImpl" />
	
	<bean class="com.sxj.statemachine.spring.StateMachineFactoryBean">
		<property name="basePackages" value="com.sxj.supervisor.machine">
		</property>
	</bean>
	
	<bean id="httpClient" class="com.sxj.util.common.SxjHttpClientImpl">
		<property name="charset" value="${httpclient.charset}" />
		<property name="keyStoreType" value="${httpclient.keyStoreType}" />
		<property name="keyStorePath" value="${httpclient.keyStorePath}" />
		<property name="keyPassword" value="${httpclient.keyPassword}" />
	</bean>
	
</beans>
